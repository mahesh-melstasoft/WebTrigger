// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  password        String
  displayName     String?
  secret          String? // For TOTP
  role            UserRole      @default(FREE)
  subscriptionId  String?
  subscription    Subscription? @relation
  isActive        Boolean       @default(true)
  slackWebhookUrl String? // Slack webhook URL for notifications
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  callbacks          Callback[]
  rateLimitLogs      RateLimitLog[]
  apiKeys            ApiKey[]
  actions            Action[]
  serviceCredentials ServiceCredential[]
  notificationSettings NotificationSettings?
  emailTemplates     EmailTemplate[]
}

enum UserRole {
  ADMIN
  PREMIUM
  PRO
  FREE
}

model Subscription {
  id                   String             @id @default(cuid())
  planId               String
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  userId               String             @unique
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

model SubscriptionPlan {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  price              Float
  currency           String   @default("USD")
  interval           String   @default("month") // month, year
  maxTriggers        Int
  maxTimeoutDuration Int // in seconds
  features           String[] // JSON array of features
  isActive           Boolean  @default(true)
  stripePriceId      String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  subscriptions Subscription[]
  rateLimits    RateLimit[]
}

model Callback {
  id              String  @id @default(cuid())
  name            String
  callbackUrl     String
  activeStatus    Boolean @default(true)
  triggerToken    String? @unique @default(uuid())
  customPath      String? @unique // Custom URL path for triggering
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeoutDuration Int     @default(30000) // 30 seconds default
  cachePeriod     Int     @default(0) // Cache period in seconds (0 = no cache)

  // HTTP Method Configuration
  httpMethod      String  @default("GET") // GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH
  httpHeaders     Json? // Headers template with variables: {"X-Custom": "value", "Authorization": "{secret:auth_token}"}
  httpBody        Json? // Request body template with variables
  queryParams     Json? // Query parameters template
  authType        String? // NONE, BASIC, BEARER, API_KEY, OAUTH2
  authConfig      Json? // Auth-specific config: {username, password, token, apiKeyName, etc}
  requestDetails  Json? // Last execution details: {method, url, headersCount, bodySize, duration, timestamp}
  responseDetails Json? // Last response details: {status, headers, bodySample, timestamp}

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs          Log[]
  rateLimitLogs RateLimitLog[]
  actions       Action[]
  executions    ActionExecution[]
  httpTemplates CallbackHttpTemplate[]
  mqtt          CallbackMqtt?
  mqttLogs      MqttPublishLog[]
  amqp          CallbackAmqp?
  amqpLogs      AmqpPublishLog[]
}

model Log {
  id           String   @id @default(cuid())
  event        String
  details      String?
  callbackId   String
  callback     Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  responseTime Int? // Response time in milliseconds
  statusCode   Int? // HTTP status code
  success      Boolean  @default(true)
}

model CallbackHttpTemplate {
  id         String   @id @default(cuid())
  callbackId String
  callback   Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)

  // Variable values for template substitution
  // Example: {"user_id": "123", "timestamp": "2025-10-25T11:00:00Z"}
  variables Json

  // Optional: name for this template set
  templateName String?
  description  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RateLimit {
  id                String           @id @default(cuid())
  planId            String
  plan              SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  requestsPerSecond Int              @default(1)
  requestsPerMinute Int              @default(60)
  requestsPerHour   Int              @default(1000)
  requestsPerMonth  Int              @default(10000)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String[] // Array of permissions: ['read', 'write', 'admin']
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("api_keys")
}

model RateLimitLog {
  id           String   @id @default(cuid())
  callbackId   String
  callback     Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  period       String // 'second', 'minute', 'hour', 'month'
  periodStart  DateTime
  requestCount Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([callbackId, period, periodStart])
}

// Actions allow callbacks to run multiple, pluggable tasks when triggered.
model Action {
  id         String     @id @default(cuid())
  callbackId String
  callback   Callback   @relation(fields: [callbackId], references: [id], onDelete: Cascade)
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       ActionType
  config     Json
  enabled    Boolean    @default(true)
  order      Int        @default(0)
  parallel   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  executions ActionExecution[]
}

model ActionExecution {
  id         String                @id @default(cuid())
  actionId   String
  action     Action                @relation(fields: [actionId], references: [id], onDelete: Cascade)
  callbackId String
  callback   Callback              @relation(fields: [callbackId], references: [id], onDelete: Cascade)
  status     ActionExecutionStatus @default(PENDING)
  attempt    Int                   @default(0)
  response   Json?
  error      String?
  durationMs Int?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model CallbackMqtt {
  id         String   @id @default(cuid())
  callbackId String   @unique
  callback   Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)

  // MQTT Configuration
  broker String // mqtt://broker.example.com:1883 or mqtts://...
  topic  String // my/topic/path with optional variables
  qos    Int     @default(1) // 0, 1, or 2
  retain Boolean @default(false)

  // Authentication
  username String?
  password String? // Encrypted
  clientId String?

  // Message Configuration
  payloadFormat   String @default("JSON") // JSON, TEXT, XML
  payloadTemplate Json? // Message template with variables

  // Retry/Reliability
  maxRetries   Int @default(3)
  retryDelayMs Int @default(1000)

  // Status
  enabled        Boolean   @default(true)
  lastTestAt     DateTime?
  lastTestStatus Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MqttPublishLog {
  id         String   @id @default(cuid())
  callbackId String
  callback   Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)

  topic    String
  payload  String // First 5KB of payload
  qos      Int
  success  Boolean
  error    String?
  duration Int // ms

  createdAt DateTime @default(now())
}

model CallbackAmqp {
  id         String   @id @default(cuid())
  callbackId String   @unique
  callback   Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)

  // AMQP Configuration
  brokerUrl    String // amqp://... connection string
  exchangeName String
  routingKey   String // with optional variables
  exchangeType String  @default("topic") // direct, topic, fanout, headers
  durable      Boolean @default(true)
  autoDelete   Boolean @default(false)

  // Authentication
  username String?
  password String? // Encrypted

  // Message Configuration
  messageFormat   String @default("JSON") // JSON, XML, TEXT
  messageTemplate Json? // Message template with variables
  priority        Int    @default(5) // 0-10

  // Delivery Settings
  persistent    Boolean @default(true)
  contentType   String  @default("application/json")
  messageExpiry Int? // milliseconds

  // Status
  enabled        Boolean   @default(true)
  lastTestAt     DateTime?
  lastTestStatus Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AmqpPublishLog {
  id         String   @id @default(cuid())
  callbackId String
  callback   Callback @relation(fields: [callbackId], references: [id], onDelete: Cascade)

  exchange   String
  routingKey String
  message    String // First 5KB of message
  success    Boolean
  error      String?
  duration   Int // ms

  createdAt DateTime @default(now())
}

model ServiceCredential {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  provider  ServiceProvider
  // encrypted secret blob (e.g. API key) stored as Base64
  secret    String
  // optional additional JSON metadata (masked on reads)
  meta      Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum ActionType {
  HTTP_POST
  SLACK
  EMAIL
  SMS
  STORE
  QUEUE
  DISCORD
  MQTT_PUBLISH
  AMQP_PUBLISH
}

enum ActionExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum ServiceProvider {
  SENDGRID
  TWILIO
  SLACK
  DISCORD
  GENERIC
  MQTT_BROKER
  AMQP_BROKER
  TELEGRAM
  WHATSAPP
  SMTP
}

// Notification Settings per User
model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Email Settings
  emailEnabled          Boolean  @default(true)
  emailRecipients       String[] // Additional email addresses based on plan
  emailOnSuccess        Boolean  @default(true)
  emailOnFailure        Boolean  @default(true)
  
  // WhatsApp Settings
  whatsappEnabled       Boolean  @default(false)
  whatsappNumbers       String[] // Phone numbers to notify
  whatsappOnSuccess     Boolean  @default(false)
  whatsappOnFailure     Boolean  @default(true)
  
  // Telegram Settings
  telegramEnabled       Boolean  @default(false)
  telegramChatIds       String[] // Telegram chat IDs
  telegramOnSuccess     Boolean  @default(false)
  telegramOnFailure     Boolean  @default(true)
  
  // SMS Settings  
  smsEnabled            Boolean  @default(false)
  smsNumbers            String[] // Phone numbers for SMS
  smsOnSuccess          Boolean  @default(false)
  smsOnFailure          Boolean  @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Email Templates for Notifications
model EmailTemplate {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  type        NotificationType
  subject     String
  htmlBody    String              @db.Text
  textBody    String?             @db.Text
  isDefault   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  @@unique([userId, name])
}

enum NotificationType {
  WEBHOOK_SUCCESS
  WEBHOOK_FAILURE
  WEBHOOK_TRIGGERED
  SYSTEM_ALERT
  SUBSCRIPTION_UPDATE
}
